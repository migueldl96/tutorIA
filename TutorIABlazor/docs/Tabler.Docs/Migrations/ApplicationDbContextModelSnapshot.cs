// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Tabler.Docs.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Tabler.Docs.Data.Country", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Code");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Tabler.Docs.Model.Auth.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("LastQuestionOrderId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Tabler.Docs.Model.Dataset.SkillState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SubjectSkillDetailId")
                        .HasColumnType("int");

                    b.Property<float>("Value")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("SubjectSkillDetailId");

                    b.ToTable("SubjectStates");
                });

            modelBuilder.Entity("Tabler.Docs.Model.Dataset.StudentSkill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<float>("Learn")
                        .HasColumnType("real");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StudentSubjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StudentSubjectId");

                    b.ToTable("StudentSkills");
                });

            modelBuilder.Entity("Tabler.Docs.Model.Dataset.StudentSubject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("StudentSubjects");
                });

            modelBuilder.Entity("Tabler.Docs.Model.Dataset.SubjectSkill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SubjectSkills");
                });

            modelBuilder.Entity("Tabler.Docs.Model.Dataset.SubjectSkillDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SubjectSkillId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SubjectSkillId");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("Tabler.Docs.Model.Questionnaire.AnswerOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSelected")
                        .HasColumnType("bit");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("AnswerOptions");
                });

            modelBuilder.Entity("Tabler.Docs.Model.Questionnaire.QuestionBase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("Header")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubHeader")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("QuestionBases");

                    b.HasDiscriminator().HasValue("QuestionBase");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Tabler.Docs.Model.Questionnaire.UniqueChoiceQuestion", b =>
                {
                    b.HasBaseType("Tabler.Docs.Model.Questionnaire.QuestionBase");

                    b.HasDiscriminator().HasValue("UniqueChoiceQuestion");
                });

            modelBuilder.Entity("Tabler.Docs.Data.Country", b =>
                {
                    b.OwnsOne("Medals", "Medals", b1 =>
                        {
                            b1.Property<string>("CountryCode")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Bronze")
                                .HasColumnType("int");

                            b1.Property<int>("Gold")
                                .HasColumnType("int");

                            b1.Property<int>("Silver")
                                .HasColumnType("int");

                            b1.HasKey("CountryCode");

                            b1.ToTable("Countries");

                            b1.WithOwner()
                                .HasForeignKey("CountryCode");
                        });

                    b.Navigation("Medals");
                });

            modelBuilder.Entity("Tabler.Docs.Model.Dataset.SkillState", b =>
                {
                    b.HasOne("Tabler.Docs.Model.Dataset.SubjectSkillDetail", "SubjectSkillDetail")
                        .WithMany("States")
                        .HasForeignKey("SubjectSkillDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubjectSkillDetail");
                });

            modelBuilder.Entity("Tabler.Docs.Model.Dataset.StudentSkill", b =>
                {
                    b.HasOne("Tabler.Docs.Model.Dataset.StudentSubject", "StudentSubject")
                        .WithMany("Skills")
                        .HasForeignKey("StudentSubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StudentSubject");
                });

            modelBuilder.Entity("Tabler.Docs.Model.Dataset.StudentSubject", b =>
                {
                    b.HasOne("Tabler.Docs.Model.Auth.User", "User")
                        .WithMany("Subjects")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Tabler.Docs.Model.Dataset.SubjectSkillDetail", b =>
                {
                    b.HasOne("Tabler.Docs.Model.Dataset.SubjectSkill", "SubjectSkill")
                        .WithMany("SubjectDetails")
                        .HasForeignKey("SubjectSkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubjectSkill");
                });

            modelBuilder.Entity("Tabler.Docs.Model.Questionnaire.AnswerOption", b =>
                {
                    b.HasOne("Tabler.Docs.Model.Questionnaire.UniqueChoiceQuestion", "Question")
                        .WithMany("Options")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Tabler.Docs.Model.Auth.User", b =>
                {
                    b.Navigation("Subjects");
                });

            modelBuilder.Entity("Tabler.Docs.Model.Dataset.StudentSubject", b =>
                {
                    b.Navigation("Skills");
                });

            modelBuilder.Entity("Tabler.Docs.Model.Dataset.SubjectSkill", b =>
                {
                    b.Navigation("SubjectDetails");
                });

            modelBuilder.Entity("Tabler.Docs.Model.Dataset.SubjectSkillDetail", b =>
                {
                    b.Navigation("States");
                });

            modelBuilder.Entity("Tabler.Docs.Model.Questionnaire.UniqueChoiceQuestion", b =>
                {
                    b.Navigation("Options");
                });
#pragma warning restore 612, 618
        }
    }
}
