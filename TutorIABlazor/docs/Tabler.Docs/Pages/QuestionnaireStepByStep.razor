@page "/questionnaire/step"
@using Tabler.Docs.Components.Questionnaire
@using Tabler.Docs.Data.QuestionnaireService
@using Tabler.Docs.Model.Dataset
@using Tabler.Docs.Model.Evaluation
@layout MinimalLayout
@using Tabler.Docs.Model.Questionnaire
@inject IQuestionnaireService _questionnaireService
@inject NavigationManager Navigation

<div class="d-flex justify-content-center align-items-center min-vh-100 bg-light">
    <div class="w-75" style="max-width: 50rem;">
        <h4 class="text-center mb-4">@statusInfo</h4>

        @if (questions is null || currentIndex >= questions.Count)
        {
                <div class="d-flex justify-content-center align-items-center" style="min-height: 200px;">
                    <span class="loader2"></span>
                </div>
        }
        else
        {
                <div class="p">
                    <Progress Size="ProgressSize.Small" Percentage="@(ProgressBar)" />
                </div>
                <div>
                @switch (questions[currentIndex])
                {
                    case UniqueChoiceQuestion mcq:
                                    <UniqueChoiceQuestionCard Question="@mcq" />
                        break;

                    default:
                                    <p>Tipo de pregunta no soportado.</p>
                        break;
                }

                    <button class="btn btn-purple mt-3 float-end" @onclick="NextQuestion">Siguiente</button>
                    <!-- Botón de salir -->
                    <button class="btn btn-secondary mt-3" @onclick="GoToDashboard">Salir al Dashboard</button>
                </div>
        }
    </div>
</div>

<style>
    .loader2 {
        width: 48px;
        height: 48px;
        border: 5px solid #EE82EE;
        border-bottom-color: transparent;
        border-radius: 50%;
        display: inline-block;
        box-sizing: border-box;
        animation: rotation 1s linear infinite;
    }

    @@keyframes rotation {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
</style>

@code {
    private List<QuestionBase>? questions = new();
    private int currentIndex = 0;
    private StartRealTimeEvaluationResponse startRealTimeEvaluationResponse = null;
    private string statusInfo = "Inicializando cuestionario";
    int UserId = 0;
    StudentSkill Skill = new();
    private int ProgressBar = 0;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            statusInfo = "Obteniendo Id del usuario...";
            StateHasChanged();
            UserId = await _localStorage.GetItemAsync<int?>("profile") ?? 0;
            Skill = await _localStorage.GetItemAsync<StudentSkill>("selectedSkill");
            statusInfo = "Cargando preguntas...";
            StateHasChanged();
            var cachedQuestions = await _questionnaireService.RequestQuestionsToAi(Skill.Name, "easy", 3);
            statusInfo = "Iniciando evaluación en tiempo real...";
            StateHasChanged();
            startRealTimeEvaluationResponse = await _questionnaireService.StartRealTimeEvaluation(UserId, new string[] { Skill.Name });
            questions = cachedQuestions;
            statusInfo = $"Evaluación iniciada.\n{startRealTimeEvaluationResponse.ToString()}";
            StateHasChanged();
        }
    }

    private async void NextQuestion()
    {
        // Recuperar la pregunta actual como UniqueChoiceQuestion
        var currentQuestion = questions[currentIndex] as UniqueChoiceQuestion;

        // Calcular valor de "correct" para el endpoint
        int correctValue = -1;
        if (currentQuestion != null)
        {
            if (currentQuestion.Options.Any(o => o.IsSelected))
            {
                correctValue = currentQuestion.IsCorrect ? 1 : 0;
            }
        }

        RealTimeEvaluationIterationResponse iterationResponse = await _questionnaireService.IterateRealTimeEvaluationAsync(
            userId: UserId,
            skillName: Skill.Name,
            correct: correctValue,
            itemId: questions[currentIndex].Id.ToString(),
            subjectId: Skill.StudentSubject.Name,
            roasterPath: startRealTimeEvaluationResponse.RosterPaths.FirstOrDefault().Value
        );

        currentIndex++;
        if (currentIndex >= questions.Count)
        {
            _navigation.NavigateTo("/dashboard");
        }
        else
        {
            ProgressBar = (int)(((double)(currentIndex) / questions.Count) * 100);
            StateHasChanged();
        }
    }

    // Método para salir al Dashboard
    private void GoToDashboard()
    {
        _navigation.NavigateTo("/dashboard");
    }
}
